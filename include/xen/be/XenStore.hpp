/*
 *  Xen Store wrapper
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Copyright (C) 2016 EPAM Systems Inc.
 */

#ifndef XENBE_XENSTORE_HPP_
#define XENBE_XENSTORE_HPP_

#include <atomic>
#include <functional>
#include <list>
#include <mutex>
#include <string>
#include <thread>
#include <unordered_map>
#include <vector>

extern "C" {
#include <xenctrl.h>
#include <xenstore.h>
}

#include "Exception.hpp"
#include "Log.hpp"
#include "Utils.hpp"

namespace XenBackend {

/***************************************************************************//**
 * Exception generated by XenStore.
 * @ingroup xen
 ******************************************************************************/
class XENDLL XenStoreException : public Exception
{
	using Exception::Exception;
};

/**
 * Callback which is called when the watch is triggered
 */
using WatchCallback = std::function<void(const std::string& path)>;

struct WatchThread
{
        std::string mPath;
        PVOID mXcHandle;
        HANDLE mEvent;
        WatchCallback mCallback;
        std::atomic_bool mAlerted;
        Log mLog;
        std::thread mThread;

        WatchThread(std::string path,
                    PVOID handle,
                    HANDLE event,
                    WatchCallback cb) :
                mPath{path},
                mXcHandle{handle},
                mEvent{event},
                mCallback{cb},
                mAlerted{false},
                mLog{"watch@" + path}
        { }

        void launch()
        {
                mThread = std::thread(std::bind(&WatchThread::run, this));
        }

        void alert() noexcept
        {
                mAlerted = true;
                SetEvent(mEvent);
        }

        void join()
        {
                mThread.join();
        }

        bool is_joinable() noexcept
        {
                return mThread.joinable();
        }

        void run()
        {
                while (true) {
                        auto rc = WaitForSingleObject(mEvent, INFINITE);

                        ResetEvent(mEvent);

                        if (rc != WAIT_OBJECT_0) {
                                LOG(mLog, ERROR) << "Wait failed, rc=0x" << std::hex << rc;
                                return;
                        }

                        if (mAlerted) {
                                return;
                        }

                        LOG(mLog, DEBUG) << "calling callback...";

                        try {
                                mCallback(mPath);
                        } catch (std::exception &e) {
                                LOG(mLog, ERROR) << "...failed, e.what=" << e.what();
                                return;
                        }
                }
        }
};

/***************************************************************************//**
 * Provides Xen Store functionality.
 * @ingroup xen
 ******************************************************************************/
class XENDLL XenStore
{
public:

	/**
	 * @param errorCallback callback called on XS watches error
	 */
	explicit XenStore(ErrorCallback errorCallback = nullptr, bool wait = false);
	XenStore(const XenStore&) = delete;
	XenStore& operator=(XenStore const&) = delete;
	~XenStore();

	/**
	 * Returns the home path of the domain.
	 * @param domId domain id
	 */
	std::string getDomainPath(domid_t domId);

	/**
	 * Read XS entry as integer.
	 * @param[in] path path to the entry
	 * @return integer value
	 */
	int readInt(const std::string& path);

	/**
	 * Read XS entry as unsigned integer.
	 * @param[in] path path to the entry
	 * @return integer value
	 */
	unsigned int readUint(const std::string& path);

	/**
	 * Read XS entry as string.
	 * @param[in] path path to the entry
	 * @return string value
	 */
	std::string readString(const std::string& path);

	/**
	 * Writes integer value into XS entry.
	 * @param path  path to the entry
	 * @param value integer value
	 */
	void writeInt(const std::string& path, int value);

	/**
	 * Writes unsigned value into XS entry.
	 * @param path  path to the entry
	 * @param value unsigned value
	 */
	void writeUint(const std::string& path, unsigned int value);

	/**
	 * Read XS entry as string.
	 * @param path path to the entry
	 * @param value string value
	 */
	void writeString(const std::string& path, const std::string& value);

	/**
	 * Removes XS entry.
	 * @param path path to the entry
	 */
	void removePath(const std::string& path);

	/**
	 * Checks if XS entry exists.
	 * @param path path to the entry
	 * @return <i>true</i> if the entry exists
	 */
	bool checkIfExist(const std::string& path);

	/**
	 * Reads XS directory
	 * @param path path to the directory
	 * @return string vector of directory items
	 */
	std::vector<std::string> readDirectory(const std::string& path);

	/**
	 * Sets watch for XS entry change.
	 * @param path       path to the entry
	 * @param callback   callback which will be called when the entry is
	 * changed
	 */
	void setWatch(const std::string& path, WatchCallback callback);

	/**
	 * Clears watch for XS entry change.
	 * @param path path to the entry.
	 */
	void clearWatch(const std::string& path);

	/**
	 * Clears all watches.
	 */
	void clearWatches();

	/**
	 * Starts handling watches.
	 */
	void start();

	/**
	 * Stops handling watches.
	 */
	void stop();

private:

	xs_handle*	mXsHandle;
	ErrorCallback mErrorCallback;
	std::atomic_bool mStarted;
	Log mLog;

	std::mutex mMutex;

#ifndef _WIN32
	std::thread mThread;
	std::unordered_map<std::string, WatchCallback> mWatches;
	std::unique_ptr<PollFd> mPollFd;
	void watchesThread();
	std::string readXsWatch(std::string& token);
	WatchCallback getWatchCallback(const std::string& path);
#else
	std::unordered_map<std::string, WatchThread> mWatchThreads;
#endif

	void init(bool wait);
	void release();
};

}

#endif /* XENBE_XENSTORE_HPP_ */
